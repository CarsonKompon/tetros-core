@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Sandbox;
@using Sandbox.UI;
@inherits Panel
@attribute [StyleSheet]

@namespace Tetros

<root>
    <div class="header">Game Over</div>

    <div class="leaderboards">
        @foreach(var leaderboard in Boards)
        {
            <div class="leaderboard">
                <h3>@leaderboard.Title</h3>
                <div class="entries">
                    @foreach(var entry in leaderboard.Entries)
                    {
                        <div class="entry @IsMe(entry)">
                            <div class="rank">@entry.Rank</div>
                            @* <div class="flag">@entry.GetFlagEmoji()</div> *@
                            <div class="name">
                                <image texture=@AvatarTexture(entry) />
                                <label>@entry.DisplayName</label>
                            </div>
                            <div class="score">@entry.Value</div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <button onclick=@Restart>Play Again</button>
</root>

@code
{
    public string[] LeaderboardIds = { "tetros_highscore", "lines_cleared" };

    List<Sandbox.Services.Leaderboards.Board> Boards {get; set;} = new();
    protected override void OnAfterTreeRender( bool firstTime )
    {
        base.OnAfterTreeRender( firstTime );

        if(firstTime)
        {
            foreach(var id in LeaderboardIds)
            {
                Boards.Add( Sandbox.Services.Leaderboards.Get(id) );
            }
            UpdateScores();
        }
    }

		

    string IsMe(Sandbox.Services.Leaderboards.Entry entry)
    {
        return entry.Me ? "me" : "";
    }

    string AvatarTexture(Sandbox.Services.Leaderboards.Entry entry)
    {
        return $"avatar:{entry.SteamId}";
    }

    public async void UpdateScores()
    {
        foreach(var board in Boards)
        {
            await board.Refresh();
        }
        StateHasChanged();
    }

    public string GetFlagEmoji(string countrycode)
    {
        if (string.IsNullOrEmpty(countrycode))
            return "";

        string code = countrycode.Replace("(", "").Replace(")", "");

        var codePoints = code.ToUpper().ToCharArray().Select(c => 127397 + c);
        return string.Join("", codePoints.Select(c => char.ConvertFromUtf32(c)));

    }

    private void Restart()
    {
        if(Ancestors.FirstOrDefault(x => x is TetrosMenu) is TetrosMenu menu)
        {
            if(menu.Descendants.FirstOrDefault(x => x is TetrosGamePage) is TetrosGamePage game)
            {
                game.StartGame();
            }
            menu.Navigate("/");
        }

        AddClass("hide");
    }
}